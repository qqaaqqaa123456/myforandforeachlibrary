// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 15.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ConsoleApplication1
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\yh200\Documents\Visual Studio 2015\Projects\consoletest\ConsoleApplication1\RuntimeTextTemplate1.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class RuntimeTextTemplate1 : RuntimeTextTemplate1Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusin" +
                    "g System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System." +
                    "Xml;\r\nnamespace ConsoleApplication1\r\n{\r\n   public partial class Class1 : IClass1" +
                    "\r\n    {\r\n        public void For(int start,int end,Action a,int step=1)\r\n       " +
                    " {\r\n            int i = start;\r\n            do\r\n            {\r\n                i" +
                    "f (a!=null)\r\n                {\r\n                    a.Invoke();\r\n               " +
                    " }\r\n                i += step;\r\n                \r\n            } while (i<end);\r\n" +
                    "        }\r\n        public void For<T1,T2>(int start, int end, Action<T1,T2> a,T1" +
                    " t1,T2 t2, int step = 1)\r\n        {\r\n            int i = start;\r\n            do\r" +
                    "\n            {\r\n                if (a != null)\r\n                {\r\n             " +
                    "       if (t1!=null&&t2!=null)\r\n                    {\r\n                     a.In" +
                    "voke(t1,t2);\r\n                    }\r\n                    \r\n                }\r\n  " +
                    "              i += step;\r\n                \r\n            } while (i < end);\r\n    " +
                    "    }\r\n        public void For<T1>(int start, int end, Action<T1> a, T1 t1, int " +
                    "step = 1)\r\n        {\r\n            int i = start;\r\n            do\r\n            {\r" +
                    "\n                if (a != null)\r\n                {\r\n                    if (t1 !" +
                    "= null )\r\n                    {\r\n                        a.Invoke(t1);\r\n        " +
                    "            }\r\n\r\n                }\r\n                i += step;\r\n                " +
                    "\r\n            } while (i < end);\r\n        }\r\n        public void For<T1,T2,T3>(i" +
                    "nt start, int end, Action<T1,T2,T3> a, T1 t1,T2 t2,T3 t3,int step = 1)\r\n        " +
                    "{\r\n            int i = start;\r\n            do\r\n            {\r\n                if" +
                    " (a != null)\r\n                {\r\n                    if (t1 != null&& t2 != null" +
                    "&& t3 != null)\r\n                    {\r\n                        a.Invoke(t1,t2,t3" +
                    ");\r\n                    }\r\n\r\n                }\r\n                i += step;\r\n    " +
                    "            \r\n            } while (i < end);\r\n        }\r\n        public void For" +
                    "<T1, T2, T3,T4>(int start, int end, Action<T1, T2, T3,T4> a, T1 t1, T2 t2, T3 t3" +
                    ",T4 t4,int step = 1)\r\n        {\r\n            int i = start;\r\n            do\r\n   " +
                    "         {\r\n                if (a != null)\r\n                {\r\n                 " +
                    "   if (t1 != null && t2 != null && t3 != null&& t4!=null)\r\n                    {" +
                    "\r\n                        a.Invoke(t1, t2, t3,t4);\r\n                    }\r\n\r\n   " +
                    "             }\r\n                i += step;\r\n                \r\n            } whil" +
                    "e (i < end);\r\n        }\r\n        public Result For<T1,T2,Result>(int start, int " +
                    "end,Func<T1,T2,Result> f,T1 t1,T2 t2, int step = 1)\r\n        {\r\n            int " +
                    "i = start;\r\n            do\r\n            {\r\n                if (f != null)\r\n     " +
                    "           {\r\n                    if (t1!=null&&t2!=null)\r\n                    {" +
                    "\r\n\r\n                    }\r\n                    \r\n                   return  f.In" +
                    "voke(t1,t2);\r\n                }\r\n                i += step;\r\n                \r\n " +
                    "           } while (i < end);\r\n            \r\n            return default(Result);" +
                    "\r\n        }\r\n        public Result For<T1, T2,T3,Result>(int start, int end, Fun" +
                    "c<T1, T2,T3,Result> f, T1 t1, T2 t2,T3 t3, int step = 1)\r\n        {\r\n           " +
                    " int i = start;\r\n            do\r\n            {\r\n                if (f != null)\r\n" +
                    "                {\r\n                    if (t1!=null&&t2!=null&&t3!=null)\r\n      " +
                    "              {\r\n                        \r\n                      return  f.Invok" +
                    "e(t1, t2,t3);\r\n                    }\r\n                    \r\n                }\r\n " +
                    "               i += step;\r\n            } while (i < end);\r\n            \r\n       " +
                    "     return default(Result);\r\n        }\r\n        public Result For<T1, Result>(i" +
                    "nt start, int end, Func<T1,Result> f, T1 t1, int step = 1)\r\n        {\r\n         " +
                    "   int i = start;\r\n            do\r\n            {\r\n                if (f != null)" +
                    "\r\n                {\r\n                    if (t1 != null )\r\n                    {" +
                    "\r\n                        \r\n                        return f.Invoke(t1);\r\n      " +
                    "              }\r\n\r\n                }\r\n                i += step;\r\n            } " +
                    "while (i < end);\r\n            \r\n            return default(Result);\r\n        }\r\n" +
                    "        public Result For<T1, T2, T3,T4, Result>(int start, int end, Func<T1, T2" +
                    ", T3,T4, Result> f, T1 t1, T2 t2, T3 t3,T4 t4, int step = 1)\r\n        {\r\n       " +
                    "     int i = start;\r\n            do\r\n            {\r\n                if (f != nul" +
                    "l)\r\n                {\r\n                    if (t1 != null && t2 != null && t3 !=" +
                    " null && t4 != null)\r\n                    {\r\n                        \r\n         " +
                    "               return f.Invoke(t1, t2, t3,t4);\r\n                    }\r\n\r\n       " +
                    "         }\r\n                i += step;\r\n            } while (i < end);\r\n        " +
                    "    \r\n            return default(Result);\r\n        }\r\n        public List<T> For" +
                    "each<T>(IEnumerable<T> source)\r\n        {\r\n            List<T> l=new List<T>();\r" +
                    "\n            if (source!=null &&source is IEnumerable<T>)\r\n            {\r\n      " +
                    "          using (var x=source.GetEnumerator())\r\n                {\r\n             " +
                    "       while (x.MoveNext())\r\n                    {\r\n                        l.Ad" +
                    "d(x.Current);\r\n                    }\r\n                }\r\n            }\r\n        " +
                    "        if (l!=null)\r\n                {\r\n                    return l;\r\n        " +
                    "        }\r\n                return null;\r\n        }\r\n        public List<T> Forea" +
                    "ch<T>(IEnumerator<T> source)\r\n        {\r\n            List<T> l = new List<T>();\r" +
                    "\n            if (source != null && source is IEnumerator<T>)\r\n            {\r\n   " +
                    "             while (source.MoveNext())\r\n                {\r\n                    l" +
                    ".Add(source.Current);\r\n                }\r\n            }\r\n            if (l != nu" +
                    "ll)\r\n            {\r\n                return l;\r\n            }\r\n            return" +
                    " null;\r\n        }\r\n        public List<object> Foreach(IEnumerator<object> sourc" +
                    "e)\r\n        {\r\n            List<object> l = new List<object>();\r\n            if " +
                    "(source != null && source is IEnumerator<object>)\r\n            {\r\n              " +
                    "  while (source.MoveNext())\r\n                {\r\n                    l.Add(source" +
                    ".Current);\r\n                }\r\n            }\r\n            if (l != null)\r\n      " +
                    "      {\r\n                return l;\r\n            }\r\n            return null;\r\n   " +
                    "     }\r\n        public List<object> Foreach(IEnumerable<object> source)\r\n       " +
                    " {\r\n            List<object> l = new List<object>();\r\n            if (source != " +
                    "null && source is IEnumerable<object>)\r\n            {\r\n                using (va" +
                    "r x = source.GetEnumerator())\r\n                {\r\n                    while (x.M" +
                    "oveNext())\r\n                    {\r\n                        l.Add(x.Current);\r\n  " +
                    "                  }\r\n                }\r\n            }\r\n            if (l != null" +
                    ")\r\n            {\r\n                return l;\r\n            }\r\n            return n" +
                    "ull;\r\n        }\r\n        public void Write(string filename, out XmlDocument xmld" +
                    "occ, out XmlWriter writer)\r\n        {\r\n            XmlDocument xmlDoc = new XmlD" +
                    "ocument();\r\n            //创建Xml声明部分，即<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n  " +
                    "          XmlDeclaration Declaration = xmlDoc.CreateXmlDeclaration(\"1.0\", \"utf-8" +
                    "\", null);\r\n            //创建根节点\r\n            XmlNode rootNode = xmlDoc.CreateElem" +
                    "ent(\"root\");\r\n            //创建student子节点\r\n            XmlNode testPointNode = xm" +
                    "lDoc.CreateElement(\"testPoint\");\r\n            //创建一个属性\r\n            XmlAttribute" +
                    " testPointID = xmlDoc.CreateAttribute(\"TestPointID\");\r\n            testPointID.V" +
                    "alue = \"1\";\r\n            XmlAttribute caseID = xmlDoc.CreateAttribute(\"CaseId\");" +
                    "\r\n            caseID.Value = \"TEST_0001\";\r\n            XmlAttribute name = xmlDo" +
                    "c.CreateAttribute(\"Name\");\r\n            name.Value = \"111\";\r\n            //xml节点" +
                    "附件属性\r\n            testPointNode.Attributes.Append(testPointID);\r\n            tes" +
                    "tPointNode.Attributes.Append(caseID);\r\n            testPointNode.Attributes.Appe" +
                    "nd(name);\r\n            rootNode.AppendChild(testPointNode);\r\n            //附加根节点" +
                    "\r\n            xmlDoc.AppendChild(rootNode);\r\n            xmlDoc.InsertBefore(Dec" +
                    "laration, xmlDoc.DocumentElement);\r\n            xmlDoc.AsParallel();\r\n          " +
                    "  XmlWriterSettings settings = new XmlWriterSettings()\r\n            {\r\n         " +
                    "       Async = true,\r\n                Indent = true,\r\n                NewLineOnA" +
                    "ttributes = true\r\n            };\r\n            XmlWriter w = XmlWriter.Create(fil" +
                    "ename, settings);\r\n            xmlDoc.WriteTo(w);\r\n            //保存Xml文档\r\n      " +
                    "      w.Flush();\r\n            //xmlDoc.Save(filename);\r\n            xmldocc = xm" +
                    "lDoc;\r\n            writer = w;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class RuntimeTextTemplate1Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
